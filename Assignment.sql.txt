-- QUESTION 1

SELECT COUNT (*) FROM users;

-- QUESTION 2

SELECT * FROM transfers;
SELECT COUNT (*) FROM transfers WHERE send_amount_currency = 'CFA';

-- QUESTION 3

SELECT COUNT(u_id) FROM transfers WHERE send_amount_currency = 'CFA';

-- QUESTION 4

SELECT  COUNT(atx_id) FROM agent_transactions
WHERE EXTRACT(YEAR FROM when_created) =2018
GROUP BY EXTRACT(MONTH FROM when_created);

-- QUESTION 5

WITH agent_withdrawers AS 
(SELECT COUNT (agent_id)
AS net_withdrawers
FROM agent_transactions
HAVING COUNT (amount)
IN (SELECT COUNT (amount) FROM agent_transactions WHERE amount > -1
AND amount !=0 HAVING COUNT (amount) > (SELECT COUNT(amount)
FROM agent_transactions WHERE amount < 1 AND amount !=0)))
SELECT net_withdrawers
FROM agent_withdrawers;


-- QUESTION 6

SELECT atx.atx_id, ag.city
FROM agent_transactions AS atx LEFT OUTER JOIN agents AS ag ON
atx.atx_id = ag.agent_id
WHERE atx.when_created BETWEEN NOW() :: DATE-EXTRACT (DOW FROM NOW()):: INTEGER -7
AND NOW ():: DATE-EXTRACT(DOW FROM NOW()) :: INTEGER
GROUP BY ag.city;

-- QUESTION 7

SELECT agents.country,
COUNT (amount) AS "atx volume city summary"
FROM agent_transactions
INNER JOIN agents
ON agents.agent_id = agent_transactions.agent_id
WHERE agent_transactions.when_created > current_date - interval '7 days'
GROUP BY agents.country;



-- QUESTION 8

SELECT w.ledger_location AS "Country", tn.send_amount_currency AS "Kind",
SUM (tn.send_amount_scalar) AS "Volume"
FROM transfers AS tn INNER JOIN wallets AS w ON tn.transfer_id = w.wallet_id
WHERE tn.when_created = CURRENT_DATE-INTERVAL '1 week'
GROUP BY w.ledger_location, tn.send_amount_currency;


-- QUESTION 9

SELECT COUNT (transfers.source_wallet_id) AS Unique_Senders,
COUNT(transfer_id) AS Transaction_Count, transfers.kind 
AS Transfer_Kind, wallets.ledger_location
AS Country, SUM (transfers.send_amount_scalar) AS Volume
FROM transfers INNER JOIN wallets ON transfers.source_wallet_id = walletd.wallet_id
WHERE (transfers.when_created > (NOW() - INTERVAL '1 week'))
GROUP BY wallets.ledger_location,transfers.kind;
						   
					

-- QUESTION 10
SELECT tn.send_amount_scalar, tn.source_wallet_id, w.wallet_id
FROM transfers AS tn INNER JOIN wallets AS w ON tn.transfer_id = w.wallet_id
WHERE tn.send_amount_scalar > 10000000
AND (tn.send_amount_currency = 'CFA' AND tn.when_created >
CURRENT_DATE-INTERVAL '1 month');
